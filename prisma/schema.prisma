// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for standardized fields
enum SkillType {
  TECHNICAL
  SOFT
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

enum ProjectStatus {
  FEATURED
  COLLABORATIVE
  IN_PROGRESS
}

enum EducationType {
  DEGREE
  CERTIFICATION
  COURSE
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?

  profile       Profile?        // One-to-One relationship with Profile
  skills        Skill[]
  projects      Project[]
  experiences   Experience[]
  educations    Education[]
  testimonials  Testimonial[]
  achievements  Achievement[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  fullName           String
  professionalTitle  String?
  bio                String?
  location           String?
  pronouns           String?
  funFact            String?
  motto              String?
  profilePicture     String?
  phoneNumber        String?
  languages          Language[] // Relation to a separate Language model
  socials            Json?      // Flexible JSON for social links

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Language {
  id        Int           @id @default(autoincrement())
  name      String
  level     LanguageLevel
  profileId String
  profile   Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int       @id @default(autoincrement())
  name      String
  type      SkillType
  level     String?   // Proficiency level
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  technologies String[]  // Array of technologies used
  link        String?
  imageUrl    String?
  status      ProjectStatus
  metrics     Json?      // JSON for project-related metrics
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id             Int       @id @default(autoincrement())
  jobTitle       String
  company        String
  startDate      DateTime?
  endDate        DateTime?
  responsibilities String?
  achievements   String?
  technologies   String[]  // Array of technologies used
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id          Int       @id @default(autoincrement())
  type        EducationType
  degree      String
  institution String
  startDate   DateTime
  endDate     DateTime?
  description String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id            Int       @id @default(autoincrement())
  fromName      String
  fromRole      String?
  relationship  String?
  message       String
  rating        Int?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Achievement {
  id          Int       @id @default(autoincrement())
  name        String
  date        DateTime?
  description String?
  link        String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
