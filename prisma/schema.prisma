// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums

enum RoleName {
  ADMIN
  USER
}

enum LanguageLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

enum SkillCategory {
  PROGRAMMING_LANGUAGE
  DESIGN_TOOL
  FRAMEWORK
  OTHER
}

enum ProjectCategory {
  DEVELOPMENT
  GRAPHIC_DESIGN
  INTERIOR
  UI_UX
  WRITING
  OTHER
}

enum ProjectStatus {
  FEATURED
  COLLABORATIVE
  IN_PROGRESS
}

enum EducationType {
  DEGREE
  CERTIFICATION
  COURSE
}

/// Models

model Role {
  id    Int      @id @default(autoincrement())
  name  RoleName @unique
  users User[]
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String?
  name         String?
  bio          String?
  profileImage String?
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // NextAuth relations
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]

  // Profile & content
  profile      Profile?
  languages    Language[]
  skills       UserSkill[]
  projects     Project[]
  experiences  Experience[]
  educations   Education[]
  achievements Achievement[]
  testimonials Testimonial[]

  // Audit & AI
  changeLogs        ChangeLog[]
  aiSuggestions     AISuggestion[]
  aiRecommendations AIRecommendation[]
  profileSummary    ProfileSummary?
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id @default(cuid())
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@id([identifier, token])
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  fullName          String
  title             String?
  slug              String?  @unique
  professionalTitle String?
  bio               String?
  location          String?
  pronouns          String?
  funFact           String?
  motto             String?
  profilePicture    String?
  phoneNumber       String?
  socials           Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  languages Language[]
}

model Language {
  id        Int           @id @default(autoincrement())
  name      String
  level     LanguageLevel
  profileId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model Skill {
  id        Int           @id @default(autoincrement())
  name      String
  category  SkillCategory
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  userSkills      UserSkill[]
  projectTools    ProjectTool[]
  experienceTools ExperienceTool[]
}

model UserSkill {
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId Int

  @@id([userId, skillId])
}

model Project {
  id          Int             @id @default(autoincrement())
  userId      String
  title       String
  category    ProjectCategory
  description String?
  link        String?
  status      ProjectStatus
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images       Image[]
  projectTools ProjectTool[]
}

model Image {
  id        Int      @id @default(autoincrement())
  projectId Int
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectTool {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
  skill     Skill   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId   Int

  @@id([projectId, skillId])
}

model ExperienceTool {
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId Int
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      Int

  @@id([experienceId, skillId])
}

model Experience {
  id          Int       @id @default(autoincrement())
  userId      String
  role        String
  company     String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  experienceTools ExperienceTool[]
}

model Education {
  id          Int           @id @default(autoincrement())
  userId      String
  type        EducationType
  degree      String
  institution String
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          Int       @id @default(autoincrement())
  userId      String
  title       String
  description String?
  date        DateTime?
  link        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id           Int      @id @default(autoincrement())
  userId       String
  fromName     String
  fromRole     String?
  relationship String?
  message      String
  rating       Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChangeLog {
  id         Int      @id @default(autoincrement())
  entityType String
  entityId   Int
  fieldName  String?
  oldValue   Json?
  newValue   Json?
  action     String
  changedAt  DateTime @default(now())
  changedBy  String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model AISuggestion {
  id         Int      @id @default(autoincrement())
  userId     String
  targetType String
  targetId   Int?
  prompt     String?
  suggestion String
  accepted   Boolean  @default(false)
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIRecommendation {
  id             Int      @id @default(autoincrement())
  userId         String
  jobTitle       String?
  inputJD        String
  recommendation Json
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProfileSummary {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  summary   String
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
